project (dcpp)

include_directories(${CMAKE_CURRENT_BINARY_DIR})

cmake_minimum_required (VERSION 2.6)
set (dcpp_hdrs
            ADLSearch.h
            AdcCommand.h
            AdcHub.h
            BZUtils.h
            BitInputStream.h
            BitOutputStream.h
            BloomFilter.h
            BufferedSocket.h
            BufferedSocketListener.h
            CID.h
            Client.h
            ClientListener.h
            ClientManager.h
            ClientManagerListener.h
            ConnectionManager.h
            ConnectionManagerListener.h
            CriticalSection.h
            CryptoManager.h
            DCPlusPlus.h
            DirectoryListing.h
            Download.h
            DownloadManager.h
            DownloadManagerListener.h
            Encoder.h
            Exception.h
            FastAlloc.h
            FavoriteManager.h
            FavoriteManagerListener.h
            FavoriteUser.h
            File.h
            FilteredFile.h
            FinishedItem.h
            FinishedManager.h
            FinishedManagerListener.h
            Flags.h
            HashBloom.h
            HashManager.h
            HashManagerListener.h
            HashValue.h
            HttpConnection.h
            HubEntry.h
            LogManager.h
            LogManagerListener.h
            MerkleCheckOutputStream.h
            MerkleTree.h
            NmdcHub.h
            Pointer.h
            QueueItem.h
            QueueManager.h
            QueueManagerListener.h
            ResourceManager.h
            SFVReader.h
            SSL.h
            SSLSocket.h
            SearchManager.h
            SearchManagerListener.h
            SearchResult.h
            Segment.h
            Semaphore.h
            ServerSocket.h
            SettingsManager.h
            ShareManager.h
            SimpleXML.h
            Singleton.h
            Socket.h
            Speaker.h
            Streams.h
            StringSearch.h
            StringTokenizer.h
            TaskQueue.h
            Text.h
            Thread.h
            TigerHash.h
            TimerManager.h
            Transfer.h
            Upload.h
            UploadManager.h
            UploadManagerListener.h
            User.h
            UserCommand.h
            UserConnection.h
            UserConnectionListener.h
            Util.h
            ZUtils.h
            forward.h
            stdinc.h
            version.h)
set (dcpp_srcs
            ADLSearch.cpp
            AdcCommand.cpp
            AdcHub.cpp
            BZUtils.cpp
            BufferedSocket.cpp
            Client.cpp
            ClientManager.cpp
            ConnectionManager.cpp
            CryptoManager.cpp
            DCPlusPlus.cpp
            DirectoryListing.cpp
            Download.cpp
            DownloadManager.cpp
            Encoder.cpp
            Exception.cpp
            FavoriteManager.cpp
            File.cpp
            FinishedItem.cpp
            FinishedManager.cpp
            HashBloom.cpp
            HashManager.cpp
            HttpConnection.cpp
            LogManager.cpp
            NmdcHub.cpp
            QueueItem.cpp
            QueueManager.cpp
            ResourceManager.cpp
            SFVReader.cpp
            SSL.cpp
            SSLSocket.cpp
            SearchManager.cpp
            SearchResult.cpp
            ServerSocket.cpp
            SettingsManager.cpp
            ShareManager.cpp
            SimpleXML.cpp
            Socket.cpp
            StringTokenizer.cpp
            Text.cpp
            Thread.cpp
            TigerHash.cpp
            TimerManager.cpp
            Transfer.cpp
            Upload.cpp
            UploadManager.cpp
            User.cpp
            UserConnection.cpp
            Util.cpp
            ZUtils.cpp
            stdinc.cpp
            version.cpp)
if (HAVE_ADDRS_H EQUAL 1)
  add_definitions (-DHAVE_IFADDRS_H)
endif (HAVE_ADDRS_H EQUAL 1)
#add_definitions (-DBUILDING_DCPP)
include_directories (${Boost_INCLUDE_DIRS} ${BZip2_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS} ${OpenSSL_INCLUDE_DIRS})
add_library (dcpp STATIC ${dcpp_srcs} ${dcpp_hdrs})
target_link_libraries (dcpp ${Boost_LIBRARIES} ${BZIP2_LIBRARIES} ${ZLIB_LIBRARIES} ${OPENSSL_LIBRARIES})
